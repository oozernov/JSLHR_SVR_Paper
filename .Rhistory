data_all_vol$hemi <- as.factor(data_all_vol$hemi)
# Convert columns to factors
data_all_vol$group <- as.factor(data_all_vol$group)
data_all_vol$subs <- as.factor(data_all_vol$subs)
data_all_vol$ROI <- as.factor(data_all_vol$ROI)
# Filter out the motion Middle subjects
data_all_vol <- data_all_vol %>%
dplyr::filter(!(subs %in% mid_subjects_to_exclude))
# Count the number of unique Subject IDs by age
count_by_age_vol <- data_all_vol %>%
dplyr::group_by(group) %>%
dplyr::summarise(n_unique_subjects = n_distinct(subs))
# Display the result
print(count_by_age_vol)
# Create separate datasets per age
early_vol <- dplyr::filter(data_all_vol, group == "early")
middle_vol <- dplyr::filter(data_all_vol, group == "middle")
late_vol <- dplyr::filter(data_all_vol, group == "late")
adult_vol <- dplyr::filter(data_all_vol, group == "adult")
# Laterality
## Convert from long to wide format for laterality
data_vol_w <- data_all_vol %>%
dplyr::select(subs, ROI, overlap, group) %>%
reshape(idvar = c("subs", "group"), timevar = "ROI", direction = "wide")
## Calculate laterality index
data_vol_w2<-data_vol_w%>%
ungroup() %>%
dplyr::mutate(IFG_lat=(overlap.IFG-`overlap.R IFG`)/(overlap.IFG+`overlap.R IFG`))%>%
dplyr::mutate(IFGorb_lat=(overlap.IFGorb -`overlap.R IFG orb`)/(overlap.IFGorb+`overlap.R IFG orb`))%>%
dplyr::mutate(MFG_lat=(overlap.MFG -`overlap.R MFG`)/(overlap.MFG +`overlap.R MFG`))%>%
dplyr::mutate(AntTemp_lat=(overlap.AntTemp-`overlap.R AntTemp`)/(overlap.AntTemp+`overlap.R AntTemp`))%>%
dplyr:: mutate(PostTem_lat=(overlap.PostTemp -`overlap.R Post temp`)/(overlap.PostTemp +`overlap.R Post temp`))
# wide to long for laterality
data_lat_l <- reshape::melt(data = data_vol_w2,
id.vars = c("subs", "group"),
measure.vars=c("IFG_lat","IFGorb_lat", "MFG_lat","AntTemp_lat","PostTem_lat"),
variable.name = "ROI",
value.name = "lat")
data_lat_l<-dplyr::rename(data_lat_l, ROI = variable)
data_lat_l<-dplyr::rename(data_lat_l, lat = value)
#filter out motion subjects
data_lat_l <- data_lat_l %>%
filter(!(subs %in% mid_subjects_to_exclude))
##create a front/post variable
data_lat_l$front<-as.factor(ifelse(data_lat_l$ROI=="IFGorb_lat"|data_lat_l$ROI=="IFG_lat"|data_lat_l$ROI=="MFG_lat","front","post"))
early_lat <- filter(data_lat_l, group == "early")
middle_lat <- filter(data_lat_l, group == "middle")
late_lat <- filter(data_lat_l, group == "late")
adult_lat <- filter(data_lat_l, group == "adult")
# Count how many NaNs per ROI
aggregate(count ~ ROI, transform(early_lat, count = is.na(lat)), sum)
aggregate(count ~ ROI, transform(middle_lat, count = is.na(lat)), sum)
aggregate(count ~ ROI, transform(late_lat, count = is.na(lat)), sum)
aggregate(count ~ ROI, transform(adult_lat, count = is.na(lat)), sum)
early_lat_front <- filter(early_vol, front == "front")
early_lat_temp <- filter(early_vol, front == "post")
middle_lat_front <- filter(middle_vol, front == "front")
middle_lat_temp <- filter(middle_vol, front == "post")
late_lat_front <- filter(late_vol, front == "front")
late_lat_temp <- filter(late_vol, front == "post")
adult_lat_front <- filter(adult_vol, front == "front")
adult_lat_temp <- filter(adult_vol, front == "post")
head(early_lat <- filter(data_lat_l, group == "early")
)
head(early_vol)
early_vol <- dplyr::filter(data_all_vol, group == "early") group_by(subs, ROI) %>%
early_vol <- dplyr::filter(data_all_vol, group == "early") %>%group_by(subs, ROI) %>%
summarise(total_overlap = sum(overlap))
head(early_vol)
early_vol <- dplyr::filter(data_all_vol, group == "early") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
head(early_vol)
early_lat_front <- filter(early_vol, front == "front")
early_lat_front <- dplyr::filter(data_all_vol, group == "early"&&front == "front") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
early_lat_front <- dplyr::filter(data_all_vol, group == "early"&front == "front") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
head(early_lat_front)
early_lat_front <- dplyr::filter(data_all_vol, group == "early"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
head(early_lat_front)
early_lat_temp <- dplyr::filter(data_all_vol, group == "early"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
head(early_lat_temp)
m1_lat<-lmer(overlap~hemi+(1|subs),data=early_vol)
m1_lat<-lmer(total_overlap~hemi+(1|subs),data=early_vol)
summary(m1_lat)
m1_lat_t<-lmer(overlap~hemi+(1|subs),data=early_lat_temp)
m1_lat_t<-lmer(total_overlap~hemi+(1|subs),data=early_lat_temp)
summary(m1_lat_t)
m1_lat_f<-lmer(total_overlap~hemi+(1|subs),data=early_lat_frontal)
m1_lat_f<-lmer(total_overlap~hemi+(1|subs),data=early_lat_front)
summary(m1_lat_f)
# Create separate datasets per age
early_vol <- dplyr::filter(data_all_vol, group == "early") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
middle_vol <- dplyr::filter(data_all_vol, group == "middle") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
late_vol <- dplyr::filter(data_all_vol, group == "late") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
adult_vol <- dplyr::filter(data_all_vol, group == "adult") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
early_lat_front <- dplyr::filter(data_all_vol, group == "early"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
early_lat_temp <- dplyr::filter(data_all_vol, group == "early"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
middle_lat_front <- dplyr::filter(data_all_vol, group == "middle"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
middle_lat_temp <- dplyr::filter(data_all_vol, group == "middle"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
late_lat_front <- dplyr::filter(data_all_vol, group == "late"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
late_lat_temp <- dplyr::filter(data_all_vol, group == "late"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
adult_lat_front <- dplyr::filter(data_all_vol, group == "adult"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
adult_lat_temp <- dplyr::filter(data_all_vol, group == "adult"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
m2_lat<-lmer(total_overlap~hemi+(1|subs),data=middle_vol)
summary(m1_lat)
rm(list=ls())
Packages <- c("dplyr",  "magrittr", "tidyr", "tidyverse","ggplot2", "lme4", "lmerTest", "plotrix","dabestr","lmerTest", "grid", "plotrix", "readxl", "lmPerm","gridExtra", "reshape","formattable", "psych", "ggpubr",'sjmisc','relaimpo',"pbkrtest","lsmeans","broom","purrr","writexl")
lapply(Packages, library, character.only = TRUE)
conflicted::conflicts_prefer("filter", winner = "dplyr")
# Load demographic info
exclusion_demo <- read.csv("./motion_all_studies_updated_demo051723.csv")
exclusion_demo$include <- as.character(exclusion_demo$include)
included_subs_outlier <- dplyr::filter(exclusion_demo, exclusion_demo$include == "1")
# Process the data
demo_data <- read.csv('./all_demographics_and_exclusion050923.csv')
demo_data <- demo_data[c(1:390), c(1:6)]
inc_demo_data_full <- dplyr::filter(demo_data, demo_data$ID %in% included_subs_outlier$PartID)
# Filter the data based on Set column
inc_demo_data_full_c <- dplyr::filter(inc_demo_data_full, inc_demo_data_full$Set != "ADULT")
inc_demo_data_full_early <- dplyr::filter(inc_demo_data_full, inc_demo_data_full$Set == "EARLY")
inc_demo_data_full_middle <- dplyr::filter(inc_demo_data_full, inc_demo_data_full$Set == "MIDDLE")
inc_demo_data_full_late <- dplyr::filter(inc_demo_data_full, inc_demo_data_full$Set == "LATE")
# Combine the filtered data
children_demo <- rbind(inc_demo_data_full_early, inc_demo_data_full_middle, inc_demo_data_full_late)
# Summarize the data
demo_children <- psych::describe(children_demo)
demo_early <- psych::describe(inc_demo_data_full_early)
demo_middle <- psych::describe(inc_demo_data_full_middle)
demo_late <- psych::describe(inc_demo_data_full_late)
adult_data <- dplyr::filter(demo_data, demo_data$Set == "ADULT")
demo_adult <- psych::describe(adult_data)
# Combine summarized data
age_cols <- c(2:5, 8:10)
demo_all_ages <- rbind(demo_early[4, age_cols], demo_middle[4, age_cols], demo_late[4, age_cols], demo_adult[4, age_cols])
rownames(demo_all_ages) <- c("Early", "Middle", "Late", "Adult")
# Add sex info
female_early <- sum(inc_demo_data_full_early$Sex == "0")
female_middle <- sum(inc_demo_data_full_middle$Sex == "2")
female_late <- sum(inc_demo_data_full_late$Sex == "2")
female_adult <- sum(adult_data$Sex == "F")
females <- rbind(female_early, female_middle, female_late, female_adult)
colnames(females) <- ("#F")
# Add handedness info
hand_early <- sum(inc_demo_data_full_early$Handedness == "1")
hand_middle <- sum(inc_demo_data_full_middle$Handedness == "1")
hand_late <- sum(inc_demo_data_full_late$Handedness == "1")
hand_adult <- sum(adult_data$Handedness == "Right")
handedness <- rbind(hand_early, hand_middle, hand_late, hand_adult)
colnames(handedness) <- ("#RH")
# Finalize the demo table
demo_table_all <- cbind(demo_all_ages[, 1], females, handedness, demo_all_ages[, 2:7])
rownames(demo_table_all) <- c("Early", "Middle", "Late", "Adult")
# Load Motion data
data_all <- read.csv("./data_all_effectsizes_050923.csv")
# Remove the postfix from Subject column
data_all$Subject <- str_replace(data_all$Subject, "_pre", "")
data_all$Subject <- str_replace(data_all$Subject, "_post", "")
# Filter data to include only specific ROIs
data_all <- data_all %>% dplyr::filter(
ROI %in% c("IFG", "IFGorb", "MFG", "AntTemp", "PostTemp",
"R IFG orb", "R IFG", "R MFG", "R AntTemp", "R Post temp")
)
# Create a front/post variable based on ROI
data_all$front <- ifelse(
data_all$ROI %in% c("IFGorb", "IFG", "MFG", "R IFG orb", "R IFG", "R MFG"),
"front",
"post"
)
data_all$front <- as.factor(data_all$front)
# Create a lh/rh variable based on ROI
data_all$hemi <- ifelse(
data_all$ROI %in% c("IFG", "IFGorb", "MFG", "AntTemp", "PostTemp"),
'lh',
'rh'
)
data_all$hemi <- as.factor(data_all$hemi)
# Convert some columns to factors
data_all$age <- as.factor(data_all$age)
data_all$Subject <- as.factor(data_all$Subject)
data_all$ROI <- as.factor(data_all$ROI)
# Add outliers from another file
outlier <- read.csv("../motion_outlier_data_051023.csv")
names(outlier)[1] <- "Subject"
data_all_outlier <- merge(data_all, outlier, by = "Subject", all=TRUE)
# Melt the data for long format
data_all_l <- reshape::melt(
data = data_all_outlier,
id.vars = c("Subject", "ROI", "age", "contrast", "front", "hemi", "num_outliers"),
measure.vars=c("language", "control"),
variable.name = "condition",
value.name = "effect"
)
data_all_l <- dplyr::rename(data_all_l, condition = variable)
data_all_l <- dplyr::rename(data_all_l, effect = value)
# Exclude additional mid subjects
mid_subjects_to_exclude <- c("reader402", "reader412", "reader413", "reader414",
"reader415", "reader417")
data_all_l <- data_all_l %>%
dplyr::filter(!(Subject %in% mid_subjects_to_exclude))
# Count the number of unique Subject IDs by age
count_by_age <- data_all_l %>%
group_by(age) %>%
dplyr::summarise(n_unique_subjects = n_distinct(Subject))
print(count_by_age)
# Select LH or RH regions only
data_left <- data_all_l %>% dplyr::filter(
ROI %in% c("IFG", "IFGorb", "MFG", "AntTemp", "PostTemp")
)
data_right <- data_all_l %>% dplyr::filter(
ROI %in% c("R Post temp", "R AntTemp", "R MFG", "R IFG", "R IFG orb")
)
# Select LH front and LH temp
data_left_front <- data_left %>% dplyr::filter(
ROI %in% c("IFG", "IFGorb", "MFG")
)
data_left_temp <- data_left %>% dplyr::filter(
ROI %in% c("AntTemp", "PostTemp")
)
# Create separate datasets per age
early_all <- dplyr::filter(data_all_l, age == "early")
early_all_left <- dplyr::filter(data_left, age == "early")
early_all_right <- dplyr::filter(data_right, age == "early")
early_all_lhTemp <- dplyr::filter(data_left_temp, age == "early")
early_all_lhFront <- dplyr::filter(data_left_front, age == "early")
middle_all <- dplyr::filter(data_all_l, age == "middle")
middle_all_left <- dplyr::filter(data_left, age == "middle")
middle_all_right <- dplyr::filter(data_right, age == "middle")
late_all <- dplyr::filter(data_all_l, age == "late")
late_all_left <- dplyr::filter(data_left, age == "late")
late_all_right <- dplyr::filter(data_right, age == "late")
adult_all <- dplyr::filter(data_all_l, age == "adult")
adult_all_left <- dplyr::filter(data_left, age == "adult")
adult_all_right <- dplyr::filter(data_right, age == "adult")
## Import and organize Volume data ##
data_all_vol <- read.csv("data_all_volume_060223.csv")
# Filter data to include only specific ROIs
data_all_vol <- data_all_vol %>%
dplyr::filter(ROI %in% c("IFG", "IFGorb", "MFG", "AntTemp", "PostTemp", "R IFG orb",
"R IFG", "R MFG", "R AntTemp", "R Post temp"))
# Create a front/post variable
data_all_vol$front <- ifelse(
data_all_vol$ROI %in% c("IFGorb", "IFG", "MFG", "R IFG orb", "R IFG", "R MFG"),
"front",
"post"
)
data_all_vol$front <- as.factor(data_all_vol$front)
# Create a lh/rh variable
data_all_vol$hemi <- ifelse(
data_all_vol$ROI %in% c("IFG", "IFGorb", "MFG", "AntTemp", "PostTemp"),
"lh",
"rh"
)
data_all_vol$hemi <- as.factor(data_all_vol$hemi)
# Convert columns to factors
data_all_vol$group <- as.factor(data_all_vol$group)
data_all_vol$subs <- as.factor(data_all_vol$subs)
data_all_vol$ROI <- as.factor(data_all_vol$ROI)
# Filter out the motion Middle subjects
data_all_vol <- data_all_vol %>%
dplyr::filter(!(subs %in% mid_subjects_to_exclude))
# Count the number of unique Subject IDs by age
count_by_age_vol <- data_all_vol %>%
dplyr::group_by(group) %>%
dplyr::summarise(n_unique_subjects = n_distinct(subs))
# Display the result
print(count_by_age_vol)
# Create separate datasets per age
early_vol <- dplyr::filter(data_all_vol, group == "early") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
middle_vol <- dplyr::filter(data_all_vol, group == "middle") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
late_vol <- dplyr::filter(data_all_vol, group == "late") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
adult_vol <- dplyr::filter(data_all_vol, group == "adult") %>%group_by(subs, hemi) %>%
summarise(total_overlap = sum(overlap))
early_lat_front <- dplyr::filter(data_all_vol, group == "early"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
early_lat_temp <- dplyr::filter(data_all_vol, group == "early"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
middle_lat_front <- dplyr::filter(data_all_vol, group == "middle"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
middle_lat_temp <- dplyr::filter(data_all_vol, group == "middle"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
late_lat_front <- dplyr::filter(data_all_vol, group == "late"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
late_lat_temp <- dplyr::filter(data_all_vol, group == "late"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
adult_lat_front <- dplyr::filter(data_all_vol, group == "adult"&front == "front") %>%group_by(subs, hemi, front) %>%
summarise(total_overlap = sum(overlap))
adult_lat_temp <- dplyr::filter(data_all_vol, group == "adult"&front == "post") %>%group_by(subs, hemi, front) %>%summarise(total_overlap = sum(overlap))
m1_lat<-lmer(total_overlap~hemi+(1|subs),data=early_vol)
summary(m1_lat)
m1_lat_t<-lmer(total_overlap~hemi+(1|subs),data=early_lat_temp)
summary(m1_lat_t)
m1_lat_f<-lmer(total_overlap~hemi+(1|subs),data=early_lat_front)
summary(m1_lat_f)
m2_lat<-lmer(total_overlap~hemi+(1|subs),data=middle_vol)
summary(m2_lat)
m2_lat_t<-lmer(total_overlap~hemi+(1|subs),data= middle_lat_temp)
summary(m2_lat_t)
m2_lat_f<-lmer(total_overlap~hemi+(1|subs),data=middle_lat_front)
summary(m2_lat_f)
m3_lat<-lmer(total_overlap~hemi+(1|subs),data=late_vol)
summary(m3_lat)
m3_lat_t<-lmer(total_overlap~hemi+(1|subs),data= late_lat_temp)
summary(m3_lat_t)
m3_lat_f<-lmer(total_overlap~hemi+(1|subs),data=late_lat_front)
summary(m3_lat_f)
m4_lat<-lmer(total_overlap~hemi+(1|subs),data=adult_vol)
summary(m4_lat)
m4_lat_t<-lmer(total_overlap~hemi+(1|subs),data= adult_lat_temp)
summary(m4_lat_t)
m4_lat_f<-lmer(total_overlap~hemi+(1|subs),data=adult_lat_front)
summary(m4_lat_f)
anova(lm(hemi~group, data=df_adult))
View(middle_all)
anova(lm(contrast~age, data=middle_all))
names(middle_all)
anova(lm(contrast~age, data=middle_all))
anova(contrast~age, data=middle_all)
summary(lm(contrast~age, data=middle_all))
anova(lm(contrast~age, data=middle_all))
m1<-lm(middle_allcontrast~age, data=middle_all)
m1<-lm(contrast~age, data=middle_all)
#Imported Data
library(readr)
data <- read_csv("Desktop/thesis/data/formatted_nu.csv")
names(rdr)[names(rdr)=="ef_vocab_std_behav1"] <- "Vocabulary"
library(dplyr)
setwd("/Users/olaozernov-palchik/Dropbox (MIT)/Annals_SVR/paper/jslhr")
rdr<-read.csv("Annals_READER_dataset2.csv")
grades<-read.csv("READER_grades.csv")
rdr<-merge(rdr,grades)
names(rdr)[names(rdr)=="celf_usp_std_behav1"] <- "LC"
names(rdr)[names(rdr)=="gort_comp_std_behav1"] <- "RC"
names(rdr)[names(rdr)=="wrmt_wa_std_behav1"] <- "WA"
names(rdr)[names(rdr)=="ran_let_std_behav1"] <- "RAN_Letters"
names(rdr)[names(rdr)=="wrmt_id_std_behav1"] <- "WID"
names(rdr)[names(rdr)=="towre_sight_std_behav1"] <- "SWE"
names(rdr)[names(rdr)=="towre_phon_std_behav1"] <- "PDE"
names(rdr)[names(rdr)=="wisc_digitfwd_std_behav1"] <- "DigitsForward"
names(rdr)[names(rdr)=="reader_id"] <- "ID"
names(rdr)[names(rdr)=="ef_vocab_std_behav1"] <- "Vocabulary"
names(rdr)[names(rdr)=="gort_ori_std_behav1"] <- "ORI"
names(rdr)[names(rdr)=="ctopp_bw_std_behav1"] <- "Blending"
names(rdr)[names(rdr)=="ctopp_elis_std_behav1"] <- "Elision"
names(rdr)[names(rdr)=="ctopp_nwr_std_behav1"] <- "Nonword"
names(rdr)[names(rdr)=="ran_2set_std_behav1"] <- "RAN_2Set"
names(rdr)[names(rdr)=="ran_obj_std_behav1"] <- "RAN_Objects"
names(rdr)[names(rdr)=="gender_behav_1"] <- "Sex"
rdr$SWE<-as.numeric(rdr$SWE)
rdr$WR<-rowMeans(rdr[,c(17,19)],na.rm= TRUE)
rdr$DD=ifelse(rdr$WA < 90 & rdr$WID < 90 | rdr$WA < 90 & rdr$SWE < 90|
rdr$WA < 90 & rdr$PDE < 90 |
rdr$WID < 90 & rdr$SWE < 90 | rdr$WID <90 & rdr$PDE < 90 |
rdr$SWE < 90 & rdr$PDE < 90,"DD",
ifelse (rdr$WA >= 90 & rdr$WID >= 90 & rdr$WA >= 90 & rdr$SWE >= 90,"TYP","NA"))
rdr<-rdr%>%filter(rdr$DD!='NA')
#### Load and organize packages ####
Packages <- c("dplyr", "stats", "psych", "ggplot2", "lme4","lm.beta", "lmerTest","Jmisc","lavaan",
"gridExtra","olsrr",'relaimpo','BayesFactor','MASS','psych','mice','VIM','psych',"rstatix","pastecs","sjmisc","bayestestR")
lapply(Packages, library, character.only = TRUE)
#### Organize ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import combined dataset #
source("bf_function.R")
all<-read.csv("all_datasets.csv")
all$study<-as.factor(ifelse(grepl('READER', all$ID), 'reader', ifelse(grepl('READ', all$ID), 'READ', ifelse(grepl('ABCD',  all$ID), 'ABCD','none'))))
all$DD<-as.factor(all$DD) #define factor for dyslexia group
all$study<-as.factor(all$study) #define factor for age group
all<-all%>%filter(all$grade!=5)
table(all$DD,all$grade)
#### Analyze ####
##### Do RC components differ based on Dys x Age? ######
# Test for DD interaction (Main analysis)
fit1<-lm(RC~grade+DD*(WR+LC+RAN_Letters+Digits), data=all)
fit2<-lm(RC~grade+DD+(WR+LC+RAN_Letters+Digits), data=all)
lmtest::lrtest(fit1,fit2)
# Test for DD x Grade interaction (Main analysis)
all$grade<-as.factor(all$grade)
fit4<-lm(RC~DD*grade*(WR+LC+RAN_Letters+Digits), data=all)
fit5<-lm(RC~grade+DD*(WR+LC+RAN_Letters+Digits), data=all)
lmtest::lrtest(fit4,fit5)
anova(fit4)
m<-lmBF(RC ~ DD*grade*(WR+LC+RAN_Letters+Digits), data = all,
progress=FALSE)
cor_matrix <- cor(df[, 5:14])
# Create dys groups
df1_dys<-df_1%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
# Create dys groups
df1_dys<-df_1%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
#### Load and organize packages ####
Packages <- c("dplyr", "stats", "psych", "ggplot2", "lme4","lm.beta", "lmerTest","Jmisc","lavaan",
"gridExtra","olsrr",'relaimpo','BayesFactor','MASS','psych','mice','VIM','psych',"rstatix","pastecs","sjmisc","bayestestR")
lapply(Packages, library, character.only = TRUE)
#### Organize ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import combined dataset #
source("bf_function.R")
all<-read.csv("all_datasets.csv")
all$study<-as.factor(ifelse(grepl('READER', all$ID), 'reader', ifelse(grepl('READ', all$ID), 'READ', ifelse(grepl('ABCD',  all$ID), 'ABCD','none'))))
all$DD<-as.factor(all$DD) #define factor for dyslexia group
all$study<-as.factor(all$study) #define factor for age group
all<-all%>%filter(all$grade!=5)
table(all$DD,all$grade)
#### Analyze ####
##### Do RC components differ based on Dys x Age? ######
# Test for DD interaction (Main analysis)
fit1<-lm(RC~grade+DD*(WR+LC+RAN_Letters+Digits), data=all)
fit2<-lm(RC~grade+DD+(WR+LC+RAN_Letters+Digits), data=all)
lmtest::lrtest(fit1,fit2)
# Test for DD x Grade interaction (Main analysis)
all$grade<-as.factor(all$grade)
fit4<-lm(RC~DD*grade*(WR+LC+RAN_Letters+Digits), data=all)
fit5<-lm(RC~grade+DD*(WR+LC+RAN_Letters+Digits), data=all)
lmtest::lrtest(fit4,fit5)
anova(fit4)
m<-lmBF(RC ~ DD*grade*(WR+LC+RAN_Letters+Digits), data = all,
progress=FALSE)
m<-lmBF(RC ~ DD*grade*(WR+LC+RAN_Letters+Digits), data = all,
progress=FALSE)
anova(fit4)
m<-lmBF(RC ~ DD*grade*(WR+LC+RAN_Letters+Digits), data = all,
progress=FALSE)
#now create seperate groups
df_1<-all%>%filter(all$grade==1)
df_2_read<-all%>%dplyr::filter(grade=='2' & study=="READ")
df_2_read<-na.omit(df_2_read)
df_3_4<-all%>%filter(all$grade==4|all$grade==3)
adult<-all%>%filter(all$grade=='adult')
# for exploratory analysis seperate 3rd and 4th graders
df_3<-all%>%filter(all$grade==3)
df_4<-all%>%filter(all$grade==4)
# Create dys groups
df1_dys<-df_1%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
df1_typ<-df_1%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
#Dys
fit_first_D<-lm(RC~WR+LC+RAN_Letters+Digits, data=df1_dys)
summary(fit_first_D)
out_1D<-tidy(fit_first_D)
knitr::kable(out_1D)
lm.beta(fit_first_D)
fit_first_D2 <- stepAIC(fit_first_D, direction = "both",steps = 1000)
fit_first_D2$anova
calc.relimp(fit_first_D, type = c("lmg"),
rela = TRUE)
#Typ
fit_first_T<-lm(RC~WR+LC+RAN_Letters+Digits, data=df1_typ)
summary(fit_first_T)
out_3T<-tidy(fit_first_T)
knitr::kable(out_1T)
fit_first_T<-lm(RC~WR+LC+RAN_Letters+Digits, data=df1_typ)
summary(fit_first_T)
out_3T<-tidy(fit_first_T)
knitr::kable(out_1T)
out_1T<-tidy(fit_first_T)
knitr::kable(out_1T)
lm.beta(fit_first_T)
fit_first_T2 <- stepAIC(fit_first_T, direction = "both",steps = 1000)
fit_first_T2$anova
calc.relimp(fit_first_T, type = c("lmg"),
rela = TRUE)
# Create dys groups
df2_dys<-df_2_read%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
df2_typ<-df_2_read%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
#Dys
fit_second_D<-lm(RC~WR+LC+RAN_Letters+Digits, data=df2_dys)
summary(fit_second_D)
out_3D<-tidy(fit_second_D)
knitr::kable(out_2D)
df2_dys<-df_2_read%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
df2_typ<-df_2_read%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
fit_second_D<-lm(RC~WR+LC+RAN_Letters+Digits, data=df2_dys)
summary(fit_second_D)
out_3D<-tidy(fit_second_D)
knitr::kable(out_2D)
knitr::kable(out_2D)
out_2D<-tidy(fit_second_D)
knitr::kable(out_2D)
lm.beta(fit_second_D)
df3_dys<-df_3_4%>%dplyr::filter(DD=="DD")%>%
select(grade,RC,WR,RAN_Letters,LC,Digits)
df3_typ<-df_3_4%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
fit_third_D<-lm(RC~WR+LC+RAN_Letters+Digits, data=df3_dys)
summary(fit_third_D)
out_3D<-tidy(fit_third_D)
knitr::kable(out_3D)
lm.beta(fit_third_D)
fit_third_D2 <- stepAIC(fit_third_D, direction = "both",steps = 1000)
fit_third_D2$anova
calc.relimp(fit_third_D, type = c("lmg"),
rela = TRUE)
fit_third_T<-lm(RC~WR+LC+RAN_Letters+Digits, data=df3_typ)
summary(fit_third_T)
out_3T<-tidy(fit_third_T)
knitr::kable(out_3T)
