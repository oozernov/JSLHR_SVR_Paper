plot.margin = unit(c(1,1,1,1), "cm")) +
scale_fill_brewer(palette = "Set1") +
geom_text(data = label_data, aes(label = contrast_variable, angle = 45, y = -0.5), position = position_dodge(width = 0.8), vjust = -0.5) +
scale_x_discrete(limits = function(x) c("", x, "")) + # Expand x-axis limits
geom_segment(aes(x = 6.5, xend = 6.5, y = 0, yend = 3.5),
linetype = "dashed", color = "black") # Add a line
names(reader)
ggplot(data = df, aes(x = factor(study_group), y = gort_comp_pre, color = factor(study_group))) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot for distribution summary, remove outliers for clarity
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter plot to show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_brewer(palette = "Set1", name = "Study Group") +  # Use a color palette for clarity
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = reader, aes(x = factor(study_group), y = gort_comp_pre, color = factor(study_group))) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot for distribution summary, remove outliers for clarity
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter plot to show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_brewer(palette = "Set1", name = "Study Group") +  # Use a color palette for clarity
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
rc_data<-read.csv("all_datasets.csv")
rc_data<-read.csv("./all_datasets.csv")
rc_data<-read.csv("~/Dropbox (MIT)/Grants/R21_2024/figures//all_datasets.csv")
names(rc_data)
ggplot(data = reader, aes(x = factor(DD), y = RC, color = factor(DD))) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot for distribution summary, remove outliers for clarity
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter plot to show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_brewer(palette = "Set1", name = "Study Group") +  # Use a color palette for clarity
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data, aes(x = factor(DD), y = RC, color = factor(DD))) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot for distribution summary, remove outliers for clarity
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter plot to show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_brewer(palette = "Set1", name = "Study Group") +  # Use a color palette for clarity
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
rc_data$DD <- factor(rc_data$DD , levels = c("DD", "TYP"), labels = c("Dys", "Typ"))
ggplot(data = rc_data, aes(x = factor(DD), y = RC, color = factor(DD))) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot for distribution summary, remove outliers for clarity
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter plot to show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_brewer(palette = "Set1", name = "Study Group") +  # Use a color palette for clarity
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
rc_data$DD <- factor(rc_data$DD, levels = c("DD", "TYP"), labels = c("Dys", "Typ"))
ggplot(data = rc_data, aes(x = DD, y = RC, color = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot
geom_jitter(width = 0.2, alpha = 0.7) +  # Show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Custom colors for groups
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1.5) +  # Add a horizontal line
annotate("text", x = 1, y = 7, label = "RC deficit", vjust = -0.5, size = 4) +  # Label for the horizontal line
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
rc_data$DD <- factor(rc_data$DD , levels = c("DD", "TYP"), labels = c("Dys", "Typ"))
ggplot(data = rc_data, aes(x = DD, y = RC, color = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot
geom_jitter(width = 0.2, alpha = 0.7) +  # Show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Custom colors for groups
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1.5) +  # Add a horizontal line
annotate("text", x = 1, y = 7, label = "RC deficit", vjust = -0.5, size = 4) +  # Label for the horizontal line
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
rc_data2<-rc_data%>%filter(DD=="Dys"|DD=="Typ")
rc_data2$DD
rc_data<-read.csv("~/Dropbox (MIT)/Grants/R21_2024/figures//all_datasets.csv")
rc_data$DD <- factor(rc_data$DD , levels = c("DD", "TYP"), labels = c("Dys", "Typ"))
rc_data2<-rc_data%>%filter(DD=="Dys"|DD=="Typ")
ggplot(data = rc_data, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Manual color setting
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1.5) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 7, label = "RC deficit", hjust = -0.1, vjust = 1.5) +  # Label for the horizontal line
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data2, aes(x = factor(DD), y = RC, color = factor(DD))) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot for distribution summary, remove outliers for clarity
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter plot to show individual data points
labs(x = "Study Group", y = "GORT Comprehension Pre", title = "Distribution of GORT Comprehension Pre by Study Group") +
scale_color_brewer(palette = "Set1", name = "Study Group") +  # Use a color palette for clarity
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Manual color setting
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1.5) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 7, label = "RC deficit", hjust = -0.1, vjust = 1.5) +  # Label for the horizontal line
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Manual color setting
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1.5) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 7, label = "RC deficit", hjust = -0.1, vjust = 1.5) +  # Label for the horizontal line
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Manual color setting
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 7, label = "Deficit Cut-off", hjust = -0.1, vjust = 1.5) +  # Label for the horizontal line
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Manual color setting
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 7, label = "Deficit Cut-off", hjust = -0.1, vjust = 1.5)
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "red", "Dys" = "blue")) +  # Manual color setting
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 7, label = "Deficit Cut-off", hjust = -0.1, vjust = 1.5) +  # Label for the horizontal line
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 4, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 2.5, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.5, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.7, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.8, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 1) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.8, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 1) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.8, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 1) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.8, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "Distribution of RC Scores by Study Group") +
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
legend = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 1) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.8, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score", title = "") +  # Remove plot title by setting it to an empty string
theme_minimal() +
theme(legend.position = "bottom",  # Adjust legend position
axis.title.x = element_text(size = 12, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_blank(),  # Ensure the legend title is removed
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
ggplot(data = rc_data2, aes(x = DD, y = RC, fill = DD)) +
geom_violin(trim = FALSE, alpha = 1) +  # Use violin plot for distribution
geom_jitter(width = 0.2, alpha = 0.7, color = "black") +  # Jitter plot to show individual data points, colored black for visibility
scale_fill_manual(values = c("Typ" = "#FF0000", "Dys" = "#0000FF")) +  # Specify traditional red and blue colors
geom_hline(yintercept = 7, linetype = "solid", color = "black", size = 1) +  # Horizontal line for RC deficit
annotate("text", x = 1.8, y = 6.5, label = "Deficit Cut-off", hjust = 1, vjust = 1) +  # Adjust label position
labs(x = "Study Group", y = "RC Score") +  # Removed title argument to eliminate plot title
theme_minimal() +
theme(legend.position = "none",  # Completely remove the legend
text = element_text(family = "Arial", size = 18),  # Apply Arial font, size 18 to all text
axis.title.x = element_text(size = 18, face = "bold"),  # Customize axis labels
axis.title.y = element_text(size = 18, face = "bold"),
panel.background = element_blank(),  # Remove background color
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
table(rc_data2$RC)
table(rc_data2$DD)
#### Load and organize packages ####
Packages <- c("dplyr", "stats", "psych", "ggplot2", "lme4","lm.beta", "lmerTest","Jmisc","lavaan",
"gridExtra","olsrr",'relaimpo','BayesFactor','MASS','psych','mice','VIM','psych',"rstatix","pastecs","sjmisc","bayestestR")
lapply(Packages, library, character.only = TRUE)
#### Organize ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import combined dataset #
source("bf_function.R")
all<-read.csv("all_datasets.csv")
all$study<-as.factor(ifelse(grepl('READER', all$ID), 'reader', ifelse(grepl('READ', all$ID), 'READ', ifelse(grepl('ABCD',  all$ID), 'ABCD','none'))))
all$DD<-as.factor(all$DD) #define factor for dyslexia group
all$study<-as.factor(all$study) #define factor for age group
all<-all%>%filter(all$grade!=5)
table(all$DD,all$grade)
#### Load and organize packages ####
Packages <- c("dplyr", "stats", "psych", "ggplot2", "lme4","lm.beta", "lmerTest","Jmisc","lavaan",
"gridExtra","olsrr",'relaimpo','BayesFactor','MASS','psych','mice','VIM','psych',"rstatix","pastecs","sjmisc","bayestestR")
lapply(Packages, library, character.only = TRUE)
#### Organize ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import combined dataset #
source("bf_function.R")
all<-read.csv("all_datasets.csv")
all$study<-as.factor(ifelse(grepl('READER', all$ID), 'reader', ifelse(grepl('READ', all$ID), 'READ', ifelse(grepl('ABCD',  all$ID), 'ABCD','none'))))
all$DD<-as.factor(all$DD) #define factor for dyslexia group
all$study<-as.factor(all$study) #define factor for age group
all<-all%>%filter(all$grade!=5)
table(all$DD,all$grade)
View(all)
#### Load and organize packages ####
Packages <- c("dplyr", "stats", "psych", "ggplot2", "lme4","lm.beta", "lmerTest","Jmisc","lavaan",
"gridExtra","olsrr",'relaimpo','BayesFactor','MASS','psych','mice','VIM','psych',"rstatix","pastecs","sjmisc","bayestestR")
lapply(Packages, library, character.only = TRUE)
#### Organize ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import combined dataset #
source("bf_function.R")
all<-read.csv("all_datasets.csv")
all$study<-as.factor(ifelse(grepl('READER', all$ID), 'reader', ifelse(grepl('READ', all$ID), 'READ', ifelse(grepl('ABCD',  all$ID), 'ABCD','none'))))
all$DD<-as.factor(all$DD) #define factor for dyslexia group
all$study<-as.factor(all$study) #define factor for age group
all<-all%>%filter(all$grade!=5)
table(all$DD,all$grade)
# Test for DD interaction (Main analysis)
fit1<-lm(RC~grade+DD*(WR+LC+RAN_Letters+Digits), data=all)
fit2<-lm(RC~grade+DD+(WR+LC+RAN_Letters+Digits), data=all)
lmtest::lrtest(fit1,fit2)
# Test for DD x Grade interaction (Main analysis)
all$grade<-as.factor(all$grade)
fit4<-lm(RC~DD*grade*(WR+LC+RAN_Letters+Digits), data=all)
fit5<-lm(RC~grade+DD*(WR+LC+RAN_Letters+Digits), data=all)
lmtest::lrtest(fit4,fit5)
anova(fit4)
#now create seperate groups
df_1<-all%>%filter(all$grade==1)
df_2_read<-all%>%dplyr::filter(grade=='2' & study=="READ")
df_2_read<-na.omit(df_2_read)
df_3_4<-all%>%filter(all$grade==4|all$grade==3)
adult<-all%>%filter(all$grade=='adult')
# for exploratory analysis seperate 3rd and 4th graders
df_3<-all%>%filter(all$grade==3)
df_4<-all%>%filter(all$grade==4)
#### Create summaries by group ####
data<-all
data$grade<-ifelse(data$grade=="3" | data$grade=="4" , "3-4", data$grade)
# Calculate summary statistics by group
summary_stats <- data %>%
group_by(grade, DD) %>%
summarise(mean_age = mean(Age),
sd_age = sd(Age),
min=min(Age),
max = max(Age))
# View the summary statistics
print(summary_stats)
library(tidyr)
library(dplyr)
library(stringr) # Add this line
# Function to compute mean, SD and p-value
compute_stats <- function(data, var) {
mean_typ <- mean(data[data$DD == "TYP", var], na.rm = TRUE)
sd_typ <- sd(data[data$DD == "TYP", var], na.rm = TRUE)
mean_dys <- mean(data[data$DD == "DD", var], na.rm = TRUE)
sd_dys <- sd(data[data$DD == "DD", var], na.rm = TRUE)
p_value <- t.test(data[data$DD == "TYP", var], data[data$DD == "DD", var], na.rm = TRUE)$p.value
return(c(mean_typ, sd_typ, mean_dys, sd_dys, p_value))
}
# Variables to compute stats for
vars <- c("Age","WID","WA","SWE","PDE", "Digits", "RAN_Letters", "LC","RC")
# Splitting data into different grade categories
grades <- unique(data$grade)
results <- data.frame()
# Loop through grades and variables
for (grade in grades) {
for (var in vars) {
stats <- compute_stats(data[data$grade == grade, ], var)
temp_df <- data.frame(grade=grade, variable=var, t(stats))
colnames(temp_df) <- c("Grade", "Variable", "Mean_Typ", "SD_Typ", "Mean_Dys", "SD_Dys", "p_value")
results <- rbind(results, temp_df)
}
}
# Pivoting the results data frame to wide format for display
results_wide <- results %>% pivot_wider(names_from = Grade, values_from = c(Mean_Typ, SD_Typ, Mean_Dys, SD_Dys, p_value))
# Renaming the columns
results_wide <- results_wide %>%
rename_with(.cols = starts_with("1st grade"),
.fn = ~str_replace(., "1st grade", "1st grade Typ M")) %>%
rename_with(.cols = starts_with("2nd grade"),
.fn = ~str_replace(., "2nd grade", "2nd grade Typ M")) %>%
rename_with(.cols = starts_with("3rd - 4th grade"),
.fn = ~str_replace(., "3rd - 4th grade", "3rd - 4th grade Typ M")) %>%
rename_with(.cols = starts_with("Adult"),
.fn = ~str_replace(., "Adult", "Adult Typ M"))
# Display the results
print(results_wide)
# Create dys groups
df1_dys<-df_1%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
df1_typ<-df_1%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
#Dys
fit_first_D<-lm(RC~WR+LC+RAN_Letters+Digits, data=df1_dys)
summary(fit_first_D)
out_1D<-tidy(fit_first_D)
#Typ
fit_first_T<-lm(RC~WR+LC+RAN_Letters+Digits, data=df1_typ)
summary(fit_first_T)
out_1T<-tidy(fit_first_T)
knitr::kable(out_1T)
lm.beta(fit_first_T)
fit_first_T2 <- stepAIC(fit_first_T, direction = "both",steps = 1000)
fit_first_T2$anova
calc.relimp(fit_first_T, type = c("lmg"),
rela = TRUE)
source("~/Dropbox (MIT)/Annals_SVR/reviews/bf_function.R")
library(BayesFactor)
### Bayesian Models ###
# Create and run Bayesian models. This part produces Bayes factors.
#To compare best models with other models, I saved these into .csv and
#compared divded BF for top model by BF for each subsequent model
#1 Typ
b1_typ <- runRegOnAll(df1_typ)
b1_typ
#2 Typ
b2_typ <- runRegOnAll(df2_typ)
b1_dys <- runRegOnAll(df1_dys)
b2_typ <- runRegOnAll(df2_typ)
# Create dys groups
df2_dys<-df_2_read%>%dplyr::filter(DD=="DD")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
df2_typ<-df_2_read%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
df3_dys<-df_3_4%>%dplyr::filter(DD=="DD")%>%
select(grade,RC,WR,RAN_Letters,LC,Digits)
df3_typ<-df_3_4%>%dplyr::filter(DD=="TYP")%>%
select(DD,RC,WR,RAN_Letters,LC,Digits)
source("~/bf_function.R")
source("bf_function.R")
#2 Typ
b2_typ <- runRegOnAll(df2_typ)
b2_typ
b2_dys <- runRegOnAll(df2_dys)
b2_dys
